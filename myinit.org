#+STARTIP: overview
* interface tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1) 
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)
  #+END_SRC

  #+RESULTS:
  : revert-buffer


** Use-Full Functions
   Run this key command on org files that you want to have an undo tree for when you start a session.

   #+BEGIN_SRC emacs-lisp
     (defun make-temp-buffer (buf)
       (interactive "B")
       (let ((confirm-nonexistent-file-or-buffer nil))
	 (switch-to-buffer buf)
	 (undo-tree-mode 1)))

     (global-set-key (kbd "C-c b") #'make-temp-buffer)
   #+END_SRC

   #+RESULTS:
   : make-temp-buffer
* magit
  #+BEGIN_SRC emacs-lisp
  (use-package magit
  :ensure t)
  #+END_SRC

  #+RESULTS:

* try 
#+BEGIN_SRC emacs-lisp
(use-package try
:ensure t)
#+END_SRC

* which-key
  Brings up some help

#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t
:config
(which-key-mode))
#+END_SRC

* The Rest
  #+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme
  :ensure t)

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook #'org-bullets-mode))

(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

;(defalias 'list-buffers 'ibuffer)
(defalias 'list-buffers 'ibuffer-other-window)

(winner-mode 1)

(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    ))

(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r")
    'counsel-minibuffer-history) ))

(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))

(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)))

#+END_SRC

* htmlize
  #+BEGIN_SRC emacs-lisp
    (use-package htmlize
      :ensure t)
  #+END_SRC

  #+RESULTS:
  
* Flycheck
  This is a useful tool for just adding some basing checks for certain programming languages like python and C etc...
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC 

  #+RESULTS:

* Python
  Need to work out how to implement this at some point because I couldn't work this out from the video.
  #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :config
      (elpy-enable))
  #+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))
  #+END_SRC
* Undo Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure
      :init
      (global-undo-tree-mode))
  #+END_SRC

* Lisp Mode
  #+BEGIN_SRC emacs-lisp
    (use-package racket-mode
      :ensure t
      :hook (racket-mode . racket-xp-mode))

    (use-package rainbow-delimiters
      :ensure t
      :hook
      ((emacs-lisp-mode . rainbow-delimiters-mode)
       (racket-mode . rainbow-delimiters-mode)
       (racket-repl-mode . rainbow-delimiters-mode)))

    (use-package paredit
      :ensure t
      :hook
      ((emacs-lisp-mode . paredit-mode)
       (racket-mode . paredit-mode)
       (racket-repl-mode . paredit-mode)))
  #+END_SRC

  #+RESULTS:
  | paredit-mode | rainbow-delimiters-mode |

* Magit
  #+BEGIN_SRC emacs-lisp
  ; need to put some code here at some point
  #+END_SRC
* Misc package

  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)
    
    (use-package beacon
      :ensure t
      :config
      ; (setq beacon-color "#666600")
      (beacon-mode 1))

    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

    (use-package expand-region
      :ensure t
      :config
       (global-set-key (kbd "C-=") 'er/expand-region))
     #+END_SRC



  #+RESULTS:
  : t

  #+RESULTS

  
  

