* links
 -[[http://cestlaz.github.io][here's his blog]]
gg* lesson 1 
** part 1
  introducing the series and setting up the package manager
  - show melpa
  - set up melpa
** part 2
  - installed use package
  - installed try
  - installed which-key
* lesson 2 - org
  show some org-mode
  -review init.el
  -set up readme.org
* lesson 3 - elisp
  (+ 22 3)
  if you run the command m-x eval-last-sexp (evaluate last s-expression)
  then it will retrun the value 25 in the buffer.
  if you set a mark around the elisp expression (c-<space> will set the space)
  then you can use the command c-x c-e which is evaluate-last-sexp
  
  try it on the below: 

  (setq v 100)
  (+ v v) <- cursor here please

  (previous-line 5)
  
  a very useful command that is available to you when using emacs in m-x view-lossage
  which basically lists all of the commands that you have recently entered into emacs
  you could build quite a complex macro as a command using this i imagine...

* lesson 4 - buffers
  covered a load of stuff about buffers but i already new 
  a lot of the stuff that was covered by this! 

* lesson 5 - windows

  we learned a couple of new really useful commands for setting
  up a series of windows. 

  c-x 1 -> runs the command delete-other-windows
  c-x 2 -> performs a horizontal split
  c-x 3 -> performs a vertical split
  you can use (winner-mode 1) which allows you to undo and 
  redo your window configurations, it creates a stack basically.
  
  c-c <left> -> undoes the window configuration
  c-c <right> -> redoes the window configuration
  
  another great thing is ace-window which extends the functionality
  of c-x o so that when you have 3 or more windows you can directly 
  select which one you want ot be in without having to cycle through 
  all the different options.
  
* lesson 6 - search...
  
  since you normally know where you want to go you should you
  c-s to search for where you want to go, it is much faster than 
  using the standard motion keys that you were taught to use in the 
  tutorial.
* lesson 7 - navigation with avy

  avy like it searches on the screen rather than in the document
  so it gives you a short cut to getting to places directly on
  your screen without having to memorize a load of key-bindings
  like you would have to using vim. it is a genius idea.
* lesson 8 - auto-complete
  
  just really helps to automatically give you word 
  suggestions from the set of words that are in you current buffer

* lesson 9 - themes
  
  skipped this lesson because you already have gruvbox! 

* lesson 10 - org init file
  
  you can create code blocks by typing the following

  #+begin_src emacs-lisp
    (+
     4
     5
     3)
  #+end_src

  #+results:
  : 12
 
  if you the type c-c c-c it will then ask you if you want to
  evaluate the block.

  you can also edit the code block carefully using c-'
  so that it formats in the way that you want it to. 

  he also shows how you can run file from another file by using the following 
  command: 

  (org-babel-load-file (expand-file-name "myinit.org"))

* lesson 11 - reveal.js
  
  this was a bit tricky to set up but once you use the webite
  and his video managed to get a nice presentaion working for 
  my self which was very satisfying

* lesson 12 - flycheck and jedi
  
  these are tools to make sure the python files etc that you decide
  to write basically do what you want the to do. 
  i needed to install pylint using apt-get and then also added 
  flycheck to my myinit.org.
  
  my current configuration at this stage is to have an 
  the following opened: 
  
  - readme.org
  - test.py
  - myinit.org
  - eshell
* lesson 14 - thoughts on emacs
  
  so one of the interesting things we are shown is that we can
  set up a timer which allows us to put a timer into the work we 
  are doing. 
  
  c-c c-x 0 -> starts the timer
  c-c c-x , -> records a time, after the timer 

  this is a useful feature for when watching a video perhaps 
  or when taking notes and you want a timer etc.

* lesson 15 - macros

  we made it, we've found the macros videos which is where we get 
  to the good stuff! 

  you can start a macro with the <f3> key
  and then once it is defined you can hit <f4> to get it to repeat.
  the macros is seriously powerfull because it can be recorded 
  for any emacs operation.
  
  if you want to store away macros by naming them with the following
  command: 
  
  <m-x> name-last-kbd-macro: name
  
  you can search for your named macros using <m-x> - "name"

  you can then retrieve the stored macro with the following 
  command: 

  <m-x> insert-kbd-macro
  
* lesson 16 - undo tree
  this is just such a great application within emacs, 
  it is truly unbelievable! 
  
  c-/ -> undo
  c-<shift>-/ -> redo
  c-x u -> shows the undo tree
  
  you can then span it using the normal emacs command c-n and c-p for example
